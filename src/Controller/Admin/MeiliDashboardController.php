<?php

namespace App\Controller\Admin;

use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Attribute\AdminDashboard;
use EasyCorp\Bundle\EasyAdminBundle\Attribute\AdminRoute;
use EasyCorp\Bundle\EasyAdminBundle\Config\Assets;
use EasyCorp\Bundle\EasyAdminBundle\Config\Dashboard;
use EasyCorp\Bundle\EasyAdminBundle\Config\MenuItem;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractDashboardController;
use Survos\MeiliBundle\Service\MeiliService;
use Symfony\Bridge\Twig\Attribute\Template;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;

/**
 * Generated by code:meili:admin
 */
#[AdminDashboard('/', 'admin')]
class MeiliDashboardController extends AbstractDashboardController
{
    public function __construct(
        private readonly EntityManagerInterface $em,
        private readonly UrlGeneratorInterface $urlGenerator,
        private readonly MeiliService $meiliService,
    ) {
    }

    #[AdminRoute('/index', '')]
    public function index(): Response
    {
        return $this->render('app/index.html.twig', [
            "settings" => $this->meiliService->settings,
            'searchTerms'  => []]);
//        return $this->render("@SurvosMeili/ez/dashboard.html.twig", []);
    }

//    #[AdminRoute('/examples', name: 'examples')]
//    public function examples(): Response
//    {
//        return $this->render('app/index.html.twig', ['searchTerms'  => [
//            "post-apocalyptic action film with robots" => "Should find Terminator Salvation semantically - no exact keyword matches but strong conceptual overlap",
//            ]
//        ]);
//
//    }


    public function configureDashboard(): Dashboard
    {
        return Dashboard::new()->setTitle("Meili Dashboard");
    }

    public function configureMenuItems(): iterable
    {
        // Main navigation
        yield MenuItem::linkToDashboard('Dashboard', 'fa fa-home');
//        yield MenuItem::linkToRoute('Examples', 'fa fa-lightbulb', 'admin_examples');

        yield MenuItem::section('Content Management', 'fas fa-folder-open');
        ;

        // Group each entity with its search options
        foreach ($this->meiliService->settings as $indexName => $meiliSetting) {
            $class = $meiliSetting['class'];
            $label = new \ReflectionClass($class)->getShortName();
            $count = $this->em->getRepository($class)->count();

            // Parent menu item for the entity
            yield MenuItem::subMenu($label, 'fas fa-film')
                ->setBadge($count, 'info')
                ->setSubItems([
                    // CRUD management
                    MenuItem::linkToCrud('Browse All', 'fas fa-table', $class)
//                        ->setBadge($count, 'info')
                    ,

                    // Divider before searches
                    MenuItem::section('Search Options'),

                    // Full-text search
                    MenuItem::linkToUrl('Full-Text Search', 'fas fa-search',
                        $this->urlGenerator->generate('meili_insta',
                            ['indexName' => $indexName]
                        )
                    )->setLinkTarget('_blank'),

                    // Semantic searches grouped
                    ...$this->getSemanticSearchItems($indexName, $meiliSetting)
                ]);
        }

        // Optional: Add a tools/utilities section at the bottom
        yield MenuItem::section('Tools', 'fas fa-wrench');
        foreach ($this->meiliService->tools as $tool) {
            yield MenuItem::linkToUrl($tool['label'], 'fas fa-chart-line', $tool['url']);
        }

        yield MenuItem::linkToUrl('Search Analytics', 'fas fa-chart-line', '#')
            ->setPermission('ROLE_ADMIN');
    }

    public function configureAssets(): Assets
    {
        return Assets::new()
            ->addCssFile('css/easyadmin-sidebar-enhanced.css')
            // Or use a CDN/external URL:
            // ->addCssFile('https://yourcdn.com/sidebar.css')

            // Can also add JS if needed:
            // ->addJsFile('js/sidebar-enhancements.js')
            ;
    }

    private function getSemanticSearchItems(string $indexName, array $meiliSetting): array
    {
        $items = [];

        if (!empty($meiliSetting['embedders'])) {
            foreach ($meiliSetting['embedders'] as $embedder) {
                $items[] = MenuItem::linkToUrl(
                    'Semantic: ' . ucfirst(str_replace('_', ' ', $embedder)),
                    'fas fa-brain',
                    $this->urlGenerator->generate('meili_insta_embed',
                        ['indexName' => $indexName, 'embedder' => $embedder]
                    )
                )->setLinkTarget('_blank');
                ;
            }
        }

        return $items;
    }

}
