parameters:
    # Define the anchor with RabbitMQ options
    rabbitmq_dsn: &rabbitmq_dsn
        dsn: '%env(MESSENGER_TRANSPORT_DSN_RABBITMQ)%'

    rabbitmq_retry: &rabbitmq_retry
        max_retries: 3
        multiplier: 2

framework:
    messenger:
        # Uncomment this (and the failed transport below) to send failed messages to this transport for later handling.
        # failure_transport: failed

        failure_transport: failed

        transports:
            async:
                <<: *rabbitmq_dsn
                options:
                    exchange:
                        name: async
                        type: fanout
                    queues:
                        async:
                            binding_keys: [async]
                retry_strategy: *rabbitmq_retry

            meili:
                <<: *rabbitmq_dsn
                options:
                    exchange:
                        name: meili
                        type: fanout
                    queues:
                        meili:
                            binding_keys: [meili]
                retry_strategy: *rabbitmq_retry

            failed: 'doctrine://default?queue_name=failed'
            sync: 'sync://'

        routing:
            Symfony\Component\Console\Messenger\RunCommandMessage: async
            App\Message\FetchYoutubeChannelMessage: async
            App\Message\LoadSongsMessage: async

            Survos\WorkflowBundle\Message\TransitionMessage: async
            Survos\MeiliBundle\Message\BatchIndexEntitiesMessage: meili
            # Route your messages to the transports
            # 'App\Message\YourMessage': async

when@test:
    framework:
        messenger:
            transports:
                # Use in-memory transport for testing
                async: 'in-memory://'
                meili: 'in-memory://'
